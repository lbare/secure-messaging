import sqlite3


def sanitize(s_input: str):
    return "".join(c for c in s_input if c.isalnum())


class ClientDatabaseHandler:

    def __init__(self, username):
        self.database = None
        self._initialize_database(username)

    def _initialize_database(self, username):
        self.database = sqlite3.connect(f"{username}.db")
        self.database.execute('''CREATE TABLE IF NOT EXIST localUser(
            USERNAME TEXT PRIMARY KEY,
            PASSWORD_HASH TEXT,
            USER_ID INT,
            DECRYPTER TEXT
        )''')
        self.database.execute('''CREATE TABLE IF NOT EXIST contact(
            ID INT PRIMARY KEY,
            USERNAME TEXT
            )''')

    def add_contact(self, user_id, user_name):
        self.database.execute(f'''CREATE TABLE IF NOT EXIST {sanitize(str(user_id))}(
            TIMESTAMP INT PRIMARY KEY,
            MESSAGE TEXT''')
        self.database.execute('''INSERT INTO contact(ID, USERNAME)
            VALUES(?,?)''', (user_id, user_name))
        self.database.commit()

    def add_message(self, user_id, message, timestamp):
        self.database.execute(f'''INSERT INTO {sanitize(str(user_id))}(TIMESTAMP, MESSAGE)
            VALUES(?,?)''', (timestamp, message))

    def add_user(self, username, password_hash, user_id, decrypter):
        """

        :param username:
        :param password_hash:
        :param user_id:
        :param decrypter: decrypter is a key generated by the client and encrypted under the password, used to decrypt
        the stored messages in the messages table
        :return:
        """
        self.database.execute('''INSERT INTO localUser(USERNAME, PASSWORD_HASH, USER_ID, DECRYPTER)
            VALUES(?,?,?,?)''', (username, password_hash, user_id, decrypter))

        self.database.commit()

    def get_user(self, username, password_hash):
        self.database.execute('''SELECT * FROM localUser WHERE USERNAME = ? AND PASSWORD_HASH = ?''',
                              (username, password_hash))
